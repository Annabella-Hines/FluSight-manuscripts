---
title: "Log transformed FluSight Manuscript 2021-2023"
author: "CDC FluSight Team"
format: 
  html:
    self-contained: true
    code-background: true
  docx: default
editor: source
date: today 
echo: false
warning: false
message: false
always_allow_html: true
---

```{r setup}

#FluSight 2021-2022 -- 2022-23 

library(tidyverse)
library(epiDisplay)
library(MMWRweek)
library(DT)
library(plotly)
library(gridExtra)
library(covidHubUtils)
library(ggridges)
library(cowplot)
library(scales)
library(RSocrata)
library(arrow)
library(scoringutils)

'%!in%' <- Negate('%in%')

last.tuesday21 = as.Date("2022-06-21")
last.tuesday23 = as.Date("2023-05-16")

window.width = c(2, 4, 8)

eval.weeks = 8

#possibly update
weeks.to.eval21 = 
  seq(as.Date("2022-02-21"),
      as.Date("2022-06-20"),
      by=7) %>% 
  as.character()

weeks.to.eval23 = 
  seq(as.Date("2022-10-17"),
      as.Date("2023-05-15"),
      by=7) %>% 
  as.character()

#update path to where cloned GitHub repository lives
githubpath = paste0("C:/Users/",Sys.info()["user"],"/Desktop/GitHub")
manuscript_repo <- paste0(githubpath, "/FluSight-manuscripts/HospitalAdmissionsForecasts_2021-22_2022-23")
flusight_forecast_data <-paste0("C:/Users/",Sys.info()["user"],"/Desktop/GitHub/Flusight-forecast-data")

suppressMessages(invisible(source(paste0(manuscript_repo,"/Model names and colors.R"))))
source(paste0(manuscript_repo,"/functions2022-2023.R"))

select = dplyr::select
filter = dplyr::filter

```

#### Get data

```{r, read data}


all_dat21 <- read_parquet(paste0(manuscript_repo, "/Data_for_Figures/all_dat21.parquet"))
all_dat23 <- read_parquet(paste0(manuscript_repo, "/Data_for_Figures/all_dat23.parquet"))


##Observed Data
obs_data21 <- read_csv(paste0(flusight_forecast_data,"/data-truth/truth-Incident Hospitalizations-Archived_9-12-2022.csv")) %>%
  mutate(wk_end_date = as.Date(date, "%m/%d/%y"),
         location_name = ifelse(location == 'US', 'National', location_name)) %>%
  select(-date) %>%
  filter(wk_end_date %in% as.Date(unique(all_dat21$target_end_date)), location != 78 )


obs_data21 <- obs_data21 %>%
  rename(value_inc = value,
         target_end_date = wk_end_date) %>%
  filter(target_end_date < Sys.Date())


location.names21 = obs_data21 %>% select(location, location_name) %>% unique()



obs_data23 <- read_csv(paste0(flusight_forecast_data,"/data-truth/truth-Incident Hospitalizations-2023-06-23.csv")) %>%
  mutate(wk_end_date = as.Date(date, "%m/%d/%y"),
         location_name = ifelse(location == 'US', 'National', location_name)) %>%
  select(-date) %>%
  filter(wk_end_date %in% as.Date(unique(all_dat23$target_end_date) ), location != 78)


obs_data23 <- obs_data23 %>%
  dplyr::rename(value_inc = value,
                target_end_date = wk_end_date) %>%
  filter(target_end_date < Sys.Date())


location.names23 = obs_data23 %>% select(location, location_name) %>% unique()
# Adding in inclusion criteria here 
include21 <- all_dat21 %>%  filter(type == "quantile", location != "US") %>% 
  mutate(baseline_n_forecasts = sum(!is.na(value[model == "Flusight-baseline"]))) %>% 
  group_by(model) %>% 
  mutate(n_forecasts = sum(!is.na(value)),
         n_locations = length(unique(location))) %>%
  mutate(per_forecasts = round((n_forecasts/(baseline_n_forecasts))*100,2),
         per_locations = round((n_locations/length(unique(all_dat21$location)))*100,2)) %>% 
  filter(per_forecasts >= 75) %>%
  select(model,n_forecasts, per_forecasts, n_locations, per_locations) %>% 
  distinct()

include23 <- all_dat23 %>%  filter(type == "quantile", location != "US") %>% 
  mutate(baseline_n_forecasts = sum(!is.na(value[model == "Flusight-baseline"]))) %>% 
  group_by(model) %>% 
  mutate(n_forecasts = sum(!is.na(value)),
         n_locations = length(unique(location))) %>%
  mutate(per_forecasts = round((n_forecasts/(baseline_n_forecasts))*100,2),
         per_locations = round((n_locations/length(unique(all_dat23$location)))*100,2)) %>% 
  filter(per_forecasts >= 75) %>%
  select(model,n_forecasts, per_forecasts, n_locations, per_locations) %>% 
  distinct()

dat_for_scores21 <- dat_for_scores_function(all_dat21, obs_data21, include21)
dat_for_scores23 <- dat_for_scores_function(all_dat23, obs_data23, include23) 

dat_for_scores21ln <- dat_for_scores21 %>% mutate(prediction = log1p(prediction), true_value = log1p(true_value))
dat_for_scores23ln <- dat_for_scores23 %>% mutate(prediction = log1p(prediction), true_value = log1p(true_value))
```
All values were log transformed prior to scoring. 

##### WIS Calculations

```{R, Wis Calculations}

## Reformat data and create scores

raw_scores21ln <- dat_for_scores21ln %>% scoringutils::score()
raw_scores23ln <- dat_for_scores23ln %>% scoringutils::score()

wis_season_by_model_21ln <- raw_scores21ln %>%
  filter(location != "US", model %in% include21$model) %>% 
  add_coverage(ranges = c(50, 95), by = c("model")) %>%
  scoringutils::summarise_scores(by = c("model"),relative_skill=TRUE,  baseline="Flusight-baseline", na.rm  = TRUE)%>%
  mutate(#cov_50=round(coverage_50*100,2),
         #cov_95=round(coverage_95*100,2),
         wis=round(interval_score,2),
         mae=round(ae_median,2),
         rel_wis=round(scaled_rel_skill,2))%>%
  select(model, wis,rel_wis, mae) #, cov_50, cov_95

inc.rankings_all21ln <- include21 %>%
  left_join(wis_season_by_model_21ln, by="model")

#23
wis_season_by_model_23ln <- raw_scores23ln %>%
  filter(location != "US", model %in% include23$model) %>% 
  add_coverage(ranges = c(50, 95), by = c("model")) %>%
  summarise_scores(by = c("model"),relative_skill=TRUE,  baseline="Flusight-baseline", na.rm  = TRUE)%>%
  mutate(#cov_50=round(coverage_50*100,2),
         #cov_95=round(coverage_95*100,2),
         wis=round(interval_score,2),
         mae=round(ae_median,2),
         rel_wis=round(scaled_rel_skill,2))%>%
  select(model, wis,rel_wis, mae) #, cov_50, cov_95

inc.rankings_all23ln <- include23 %>%
  left_join(wis_season_by_model_23ln, by="model")

#coverage in scoringutils isn't exactly what we've been doing so approximating our coverage with data from scoringutils functions 
WIS_all21ln <- raw_scores21ln %>% summarise_scores(na.rm = TRUE) %>% mutate(wis=round(interval_score,2))
dat_21ln <- dat_for_scores21ln %>% filter(location != "US") %>% pivot_wider(names_from = c(type, quantile), values_from=c(prediction, true_value)) %>% select(target, model, forecast_date, location, date, prediction_quantile_0.025, prediction_quantile_0.25, prediction_quantile_0.5, prediction_quantile_0.75, prediction_quantile_0.975, true_value_quantile_0.5)

WIS_all21ln <- merge(WIS_all21ln, dat_21ln, by = c("target", "model", "forecast_date", "location", "date")) %>% rename("report" = "true_value_quantile_0.5") %>% mutate(coverage.50 = ifelse(report >= prediction_quantile_0.25 & report <= prediction_quantile_0.75,T,F),  coverage.95 = ifelse(report >= prediction_quantile_0.025 & report <= prediction_quantile_0.975,T,F))

WIS_all23ln <- raw_scores23ln %>% summarise_scores(na.rm = TRUE) %>% mutate(wis=round(interval_score,2))
dat_23ln <- dat_for_scores23ln %>% filter(location != "US") %>% pivot_wider(names_from = c(type, quantile), values_from=c(prediction, true_value)) %>% select(target, model, forecast_date, location, date, prediction_quantile_0.025, prediction_quantile_0.25, prediction_quantile_0.5, prediction_quantile_0.75, prediction_quantile_0.975, true_value_quantile_0.5)

WIS_all23ln <- merge(WIS_all23ln, dat_23ln, by = c("target", "model", "forecast_date", "location", "date")) %>% rename("report" = "true_value_quantile_0.5") %>% mutate(coverage.50 = ifelse(report >= prediction_quantile_0.25 & report <= prediction_quantile_0.75,T,F),  coverage.95 = ifelse(report >= prediction_quantile_0.025 & report <= prediction_quantile_0.975,T,F))

# WIS_all21ln <- wis_all_function(dat_for_scores21ln)
# WIS_all23ln <- wis_all_function(dat_for_scores23ln)


# pull out data on forecasts 
WIS_alllocations21ln <- WIS_all21ln
WIS_alllocations23ln <- WIS_all23ln
  
WIS_all21ln = filter(WIS_all21ln, location_name != "National")
WIS_all23ln = filter(WIS_all23ln, location_name != "National")
  
WIS_Season21ln <- filter(WIS_all21ln, as.Date(forecast_date) >= as.Date("2022-02-19"), as.Date(forecast_date) <= as.Date(last.tuesday21+4)) %>% {unique(.)}
WIS_Season23ln <- filter(WIS_all23ln, as.Date(forecast_date) >= as.Date("2022-10-17"), as.Date(forecast_date) <= as.Date(last.tuesday23+4)) %>% {unique(.)}

  and_coverage_21 <- WIS_Season21ln %>% group_by(model) %>% summarise(Percent.Cov.50 = mean(coverage.50, na.rm = TRUE), Percent.Cov.95 = mean(coverage.95, na.rm = TRUE)) %>% distinct() %>% ungroup()
  
  inc.rankings_all21ln <- inc.rankings_all21ln %>%  left_join(and_coverage_21, by = "model")
  
  and_coverage_23 <- WIS_Season23ln %>% group_by(model) %>% summarise(Percent.Cov.50 = mean(coverage.50, na.rm = TRUE), Percent.Cov.95 = mean(coverage.95, na.rm = TRUE)) %>% distinct() %>% ungroup()
  inc.rankings_all23ln <- left_join(inc.rankings_all23ln, and_coverage_23, by = "model")

```

##### Season inc rankings: Table S3

```{r, Season}

# inc.rankings_all21ln <- inc.rankings_all_func(WIS_Season21ln)
# inc.rankings_all23ln <- inc.rankings_all_func(WIS_Season23ln)

    
inc.rankings_all <- rbind(mutate(inc.rankings_all21ln, season = "2021-2022"), mutate(inc.rankings_all23ln, season = "2022-2023")) %>% arrange(season, rel_wis)

inc.rankings_all %>%
    rename(Model = model,
           `Absolute WIS` = wis,
           `Relative WIS`= rel_wis,
           `50% Coverage (%)` = Percent.Cov.50,
           `95% Coverage (%)` = Percent.Cov.95,
           `% of Forecasts Submitted`  = per_forecasts,
           `% of Locations Forecasted` = per_locations,
          # `% of Locations Fully Forecasted` = frac.locations.fully.forecasted,
          # `% of Submitted Locations with All Forecasts` = frac.submitted.locations.fully.forecasted,
           `Season` = season, 
           `MAE` = mae) %>% 
    select(Model, `Absolute WIS`, `Relative WIS`,
           MAE, `50% Coverage (%)`, 
           `95% Coverage (%)`, 
           `% of Forecasts Submitted`) %>%
    #datatable()
    #arrange(`Season`, `Relative WIS`) %>% 
    mutate_if(is.numeric, round, digits = 2) %>%  
    knitr::kable(align = c("lcccccccccc"), caption = "Table S3",#col.names = c()
    ) %>% 
    kableExtra::pack_rows(index = table(inc.rankings_all$season)) %>% 
    kableExtra::footnote( general_title = "") %>%
     kableExtra::kable_classic()#%>%  kableExtra::save_kable(file = paste0(manuscript_repo,"/Supplemental_analyses/Supplemental Output/table_S3.pdf"))

# inc.rankings_all %>%
#     rename(Model = model,
#            `Absolute WIS` = wis,
#            `Relative WIS`= rel_wis,
#            `Season` = season) %>%
#     select(Model, `Absolute WIS`, `Relative WIS`, Season) %>%
#     mutate_if(is.numeric, round, digits = 2) %>%
#   {write.csv(., paste0(manuscript_repo, "/Supplemental_analyses/log-transformed/logtable1.csv"), row.names = FALSE)}

#### UPDATES HERE
# WIS_Season21ln <- WIS_Season21ln %>% filter(model %in% inc.rankings_all21ln$model)
# inc.rankings_location21ln <- make_WIS_ranking_location(WIS_Season21ln)
# inc.rankings_location21ln$below <- ifelse(inc.rankings_location21ln$relative_WIS < 1, 1, 0)

WIS_and_coverage_21ln <- WIS_Season21ln %>% group_by(model, location_name) %>% summarise(Percent.Cov.50 = mean(coverage.50, na.rm = TRUE), Percent.Cov.95 = mean(coverage.95, na.rm = TRUE)) %>% distinct() %>% ungroup()

inc.rankings_location21ln <- raw_scores21ln %>% 
  filter(location != "US") %>% 
  summarise_scores(by = c("model", "location_name"), relative_skill = TRUE,  baseline = "Flusight-baseline", na.rm = TRUE) %>% 
  mutate(wis=round(interval_score,2),
         mae=round(ae_median,2),
         rel_wis=round(scaled_rel_skill,2))%>%
  select(model, location_name, wis,rel_wis, mae) %>% # mutate(below = ifelse(rel_wis < 1, 1, 0)) %>% 
  group_by(location_name) %>%
  mutate(baseline_wis = wis[model == "Flusight-baseline"]) %>%
  ungroup() %>%
  mutate(below = ifelse(wis < baseline_wis & model != "Flusight-baseline", 1, 0)) %>% 
  select(-baseline_wis) %>% 
  left_join(WIS_and_coverage_21ln, by = join_by("model" == "model", "location_name" == "location_name"))
  
# WIS_Season23ln <- WIS_Season23ln %>% filter(model %in% inc.rankings_all23ln$model)
# inc.rankings_location23ln <- make_WIS_ranking_location(WIS_Season23ln)
# inc.rankings_location23ln$below <- ifelse(inc.rankings_location23ln$relative_WIS < 1, 1, 0)

WIS_and_coverage_23ln <- WIS_Season23ln %>% 
  group_by(model, location_name) %>% 
  summarise(Percent.Cov.50 = mean(coverage.50, na.rm = TRUE), Percent.Cov.95 = mean(coverage.95, na.rm = TRUE)) %>% 
  distinct() %>% 
  ungroup()

inc.rankings_location23ln <- raw_scores23ln %>% 
  filter(location != "US") %>% 
  summarise_scores(by = c("model", "location_name"), relative_skill = TRUE,  baseline = "Flusight-baseline", na.rm = TRUE) %>% 
  mutate(wis=round(interval_score,2),
         mae=round(ae_median,2),
         rel_wis=round(scaled_rel_skill,2))%>%
  select(model, location_name, wis,rel_wis, mae) %>% # mutate(below = ifelse(rel_wis < 1, 1, 0)) %>% 
  group_by(location_name) %>%
  mutate(baseline_wis = wis[model == "Flusight-baseline"]) %>%
  ungroup() %>%
  mutate(below = ifelse(wis < baseline_wis & model != "Flusight-baseline", 1, 0)) %>% select(-baseline_wis) %>% 
  left_join(WIS_and_coverage_23ln, by = join_by("model" == "model", "location_name" == "location_name"))
  
inc.rankings_location <- inc.rankings_location21ln %>% 
  mutate(season = "2021-2022") %>% 
  rbind(mutate(inc.rankings_location23ln, season = "2022-2023"))
  
national21ln <- WIS_alllocations21ln %>% 
  filter(location_name == "National", model != "Flusight-ensemble", model != "Flusight-baseline")%>%
  group_by(forecast_date) %>% 
  summarise(n = length(unique(model))) %>% 
  ungroup()


national23ln <- WIS_alllocations23ln %>% 
  filter(location_name == "National", model != "Flusight-ensemble", model != "Flusight-baseline") %>%
  group_by(forecast_date) %>% 
  summarise(n = length(unique(model))) %>% 
  ungroup()


```

##### Forecasts & Observed

```{r, Forecasts and Observed}

all_dat21ln <- all_dat21 %>% mutate(value = sqrt(value))
all_dat23ln <- all_dat23 %>% mutate(value = sqrt(value))
obs_data21ln <- obs_data21 %>% mutate(value_inc = sqrt(value_inc))
obs_data23ln <- obs_data23 %>% mutate(value_inc = sqrt(value_inc))

fig21ln <- forecastsandobservedplt(all_dat21ln, obs_data21ln, "a")

fig23ln <- forecastsandobservedplt(all_dat23ln, obs_data23ln, "b")

```

##### Absolute WIS by model: Figure S6

```{r, WIS combine}

WIS_Season21ln$season <- "2021-2022"
WIS_Season23ln$season <- "2022-2023"

WIS_Season <- rbind(WIS_Season21ln, WIS_Season23ln) %>% rename("target_end_date" = "date", "WIS" = "wis")
```



##### Coverage Figures

```{r, Coverage}
Scores_tab21ln <- scores_tab_function(inc.rankings_location21ln,inc.rankings_all21ln, WIS_Season21ln)
Scores_tab23ln <- scores_tab_function(inc.rankings_location23ln, inc.rankings_all23ln, WIS_Season23ln)

```

##### 95% Coverage by model

```{r, 95 coverage}

coverage95_states <- WIS_Season %>% filter(location_name != "National") %>% 
  filter(target == "1 wk ahead inc flu hosp"| target == "4 wk ahead inc flu hosp") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(model = model,
            target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
            coverage95 = mean(coverage.95)) %>% 
  mutate(model_color = ifelse(model == "Flusight-baseline", "#d6936b", ifelse(model == "Flusight-ensemble", "#6baed6", "#abbfcb"))) %>% ungroup()


```

##### 50% coverage by model

```{r, 50 coverage}

coverage50_states <- WIS_Season %>% filter(location_name != "National") %>% 
  filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(model = model,
            target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
            coverage50 = mean(coverage.50))  %>% ungroup()
```
##### Coverage Tables: Table S4

```{r, Coverage tables}

locationcount <- length(unique(WIS_Season$location_name))# - 1

coverage95_summary <- WIS_Season %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
   filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% ungroup() %>% unique()
  #mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))

coverage95_summary_4 <- WIS_Season %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "4 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% ungroup() %>%  unique()
coverage50_summary_4 <- WIS_Season %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "4 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage50 = sum(coverage.50)/locationcount) %>% unique()


coverage50_summary <- WIS_Season %>% filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage50 = sum(coverage.50)/locationcount) %>% ungroup() %>% unique()


coverage95_summary_all <- WIS_Season %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(model, forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% unique() %>% 
  group_by(model) %>% summarise(model = model,
                                avg = mean(coverage95)) %>% unique()
#%>% 
#mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))

coverage50_summary_all <- WIS_Season %>% filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(model, forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage50 = sum(coverage.50)/locationcount)

coverage95_summary_all2 <- WIS_Season %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "2 wk ahead inc flu hosp") %>% 
  group_by(model, forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% unique() %>% 
  group_by(model) %>% summarise(model = model,
                                  avg = mean(coverage95)) %>% unique()

weekly_breakdown <- WIS_Season %>% group_by(model, season) %>% summarise(
  model = model,
  One_week_Cov = mean(coverage.95[target == "1 wk ahead inc flu hosp"])*100,
  Two_week_Cov = mean(coverage.95[target == "2 wk ahead inc flu hosp"])*100,
  Three_week_Cov = mean(coverage.95[target == "3 wk ahead inc flu hosp"])*100,
  Four_week_Cov = mean(coverage.95[target == "4 wk ahead inc flu hosp"])*100
) %>% unique()



cov95_breakdown21ln <- cov95_function(WIS_Season21ln, Scores_tab21ln)

cov95_breakdown23ln <- cov95_function(WIS_Season23ln, Scores_tab23ln)

cov95_breakdownall <- rbind(mutate(cov95_breakdown21ln, season = "2021-2022"), mutate(cov95_breakdown23ln, season = "2022-2023"))

cov95_breakdownall %>% arrange(season, Relative_WIS) %>% mutate_if(is.numeric, round, digits = 2) %>% select(-season) %>%  
  knitr::kable(align = c("lcccccccccc"), caption = "Table S4", col.names = c("Model", "Relative WIS", "% WIS Below Baseline", "1 Wk Coverage", "2 Wk Coverage", "3 Wk Coverage", "4 Wk Coverage", "% Cov abv 90 (1 Wk)", "% Cov abv 90 (2 Wk)", "% Cov abv 90 (3 Wk)", "% Cov abv 90 (4 Wk)")) %>% 
  kableExtra::footnote(general = "Table S4: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "") %>% 
  kableExtra::pack_rows(index = table(cov95_breakdownall$season)) %>% 
  kableExtra::kable_classic()# %>%
   #kableExtra::save_kable(file = paste0(manuscript_repo,"/Supplemental_analyses/Supplemental Output/table_S4.pdf"))


```



##### Model rank plot: Figure S5

```{r, Model Ranks}
# |fig-height: 8
# |fig-width: 10
inc_scores_overall <- WIS_Season %>%
 # filter(include_overall == "TRUE") %>%
  group_by(target_end_date, target, location_name, season) %>%
  mutate(n_models = n()) %>%
  ##filter(n_models >= 15) %>%
  arrange(WIS) %>%
  mutate(model_rank = row_number(), rank_percentile = model_rank/n_models) %>%
  arrange(-WIS) %>%
  mutate(rev_rank = (row_number()-1)/(n_models-1)) %>%
  ungroup() %>%
  mutate(model = reorder(model, rev_rank, FUN=function(x) quantile(x, probs=0.25, na.rm=TRUE)))

n_unique_predict<- inc_scores_overall %>% filter(season == "2022-2023") %>% 
  group_by(target_end_date, location_name, target, season) %>%
  summarize(n()) %>%
  nrow()


## average rank
# inc_scores_overall %>%
#   group_by(season,model) %>%
#   summarize(average_rank = mean(model_rank), total_n = n(), 
#             n_top_rank = sum(model_rank==1), pct_top = n_top_rank/total_n*100) %>%
#   print(n=Inf) 

## average rank
average_rank_percent <- inc_scores_overall %>%
  group_by(model, season) %>%
  summarize(average_rank = mean(rev_rank), total_n = n(),
            n_top50 = sum(rev_rank> 0.5) , pct_top50 = n_top50/total_n*100,
            n_top25 = sum(rev_rank> 0.75) , pct_top25 = n_top25/total_n*100,
            n_bottom50 = sum(rev_rank< 0.5) , pct_bottom50 = n_bottom50/total_n*100,
            n_bottom25 = sum(rev_rank< 0.25) , pct_bottom25 = n_bottom25/total_n*100) %>%
  #print(n=Inf) %>% 
  arrange(-pct_top50)

ave_rank_percent21ln <- average_rank_percent %>% filter(season == "2021-2022") %>% ungroup()
ave_rank_percent23ln <- average_rank_percent %>% filter(season == "2022-2023") %>% ungroup()

bimodal_rank21 <- ave_rank_percent21ln %>% filter(pct_top25 < 50, pct_bottom25 < 50) %>%  mutate(pct_top_bottom = pct_top25 + pct_bottom25) %>% filter(pct_top_bottom >50)
bimodal_rank23 <- ave_rank_percent23ln%>% filter(pct_top25 < 50, pct_bottom25 < 50)  %>% mutate(pct_top_bottom = pct_top25 + pct_bottom25) %>% filter(pct_top_bottom >50)



figures5 <- inc_scores_overall %>% 
  ggplot(aes(y=model, x=rev_rank, fill = factor(after_stat(quantile)))) +
  stat_density_ridges(
    geom = "density_ridges_gradient", calc_ecdf = TRUE,
    quantiles = 4, quantile_lines = TRUE, color = "gray30"
  ) +
  scale_fill_manual(values = c("#6baed6", "#c86bd6","#d6936b","#78d66b"), name = "Quartiles")+
  labs(x = "Standardized Rank", y = "Model", color = "Quartiles")+
  scale_x_continuous(limits=c(0,1)) + 
  theme_bw()+
  facet_grid(rows = vars(season), scales = "free_y", labeller = as_labeller(c(`2021-2022` = "A) 2021-2022",`2022-2023` = "B) 2022-2023")) )

# ggsave(paste0(manuscript_repo, "/Supplemental_analyses/Supplemental Output/Figure_S5.png"), width=8, height=8, units="in", plot = figures5)

```

```{r, ABS WIS}

abs_states <- WIS_Season %>% filter(location_name != "National") %>% 
  filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(model = model,
            target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
            abs_WIS = mean(WIS)) %>% 
  ungroup() %>% mutate(log_WIS = log10(abs_WIS))

abs_flusight <- abs_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
abs_not_flusight <- abs_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))

wis_labels <- as_labeller(c(`1 wk ahead inc flu hosp` = "1 Week Ahead", 
                                 `4 wk ahead inc flu hosp` = "4 Week Ahead", 
                            `2021-2022` = "2021-2022", 
                            `2022-2023` = "2022-2023"))


figures6 <- ggplot(abs_flusight, aes(x = target_end_date, 
                                     y = abs_WIS, group = model,
                                     col = model)) +
  geom_line(linewidth = 1) + geom_point(size = 2) +
  scale_color_manual(values = c("#d6936b", "#6baed6")) +
  geom_line(data = abs_not_flusight, aes(x = target_end_date, y = abs_WIS, group = model), color = adjustcolor("grey50", .35)) + 
  labs(y = "Absolute WIS",
       x = "Forecast Target End Date",
       color = "Model",
       title = "Absolute WIS by Model") +
  theme_bw()+
  scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
  facet_grid(rows = vars(target), cols = vars(season), labeller = wis_labels,  scales = "free_x")

figures6

# ggsave(paste0(manuscript_repo, "/Supplemental_analyses/Supplemental Output/Figure_S6.png"), plot = figures6, width = 8, height = 5)
```
##### Absolute WIS by week table

```{r, Abs WIS by wk}

model_abs <- abs_states %>% unique() %>% group_by(model, target, season) %>% summarise(
  model = model,
  target = target,
  minimum = min(abs_WIS),
  maximum = max(abs_WIS),
  Median = median(abs_WIS)
) %>% ungroup() %>% unique()

abs_states_all <- WIS_Season %>% filter(location_name != "National") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(model = model,
            target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
            abs_WIS = mean(WIS)) %>% ungroup()


model_abs_all <- abs_states_all %>% unique() %>% group_by(model, target, season) %>% summarise(
  model = model,
  target = target,
  minimum = min(abs_WIS),
  maximum = max(abs_WIS),
  Median = median(abs_WIS)
) %>% unique()

abs_breakdown <- WIS_Season %>% group_by(model, season) %>% summarise(
  model = model,
  One_week_abs = mean(WIS[target == "1 wk ahead inc flu hosp"]),
  Two_week_abs = mean(WIS[target == "2 wk ahead inc flu hosp"]),
  Three_week_abs = mean(WIS[target == "3 wk ahead inc flu hosp"]),
  Four_week_abs = mean(WIS[target == "4 wk ahead inc flu hosp"])
) %>% unique() 


# abs_breakdown_WIS <- merge(inc.rankings_all[,c(1,3,11)], abs_breakdown, by= c("model", "season")) %>% arrange(season, rel_wis)
# 
# 
# abs_breakdown_WIS %>% select(-season) %>% mutate_if(is.numeric, round, digits = 2) %>%  
#   knitr::kable(align = c("lccccc"), caption = "Table 3", col.names = c("Model", "Relative WIS", "1 Wk ABS WIS", "2 Wk ABS WIS", "3 Wk ABS WIS", "4 Wk ABS WIS")) %>% 
#   kableExtra::footnote(general = "Table 3", general_title = "")%>% 
#   kableExtra::pack_rows(index = table(abs_breakdown_WIS$season)) %>% 
#   kableExtra::kable_classic() 


```
## Model Ranking
##### Relative WIS by Location: Figure S7

```{r, Relative WIS by location}

inc.rankings_all_nice <- rbind(mutate(inc.rankings_all21ln, season = "2021-2022"), mutate(inc.rankings_all23ln, season = "2022-2023")) %>% group_by(season) %>% arrange(season, rel_wis) %>% mutate(modelorder = paste(model, season))

scores <- inc.rankings_location %>% filter(is.finite(rel_wis)) %>% left_join(., y = inc.rankings_all_nice[,c("model","season", "modelorder")], by = c("model", "season"))
scores_order <- inc.rankings_all_nice
levels_order <- scores_order$modelorder

figures7 <- ggplot(scores, 
                      aes(x = factor(modelorder, levels = levels_order), y=location_name, 
                          fill= scales::oob_squish(rel_wis, range = c(- 2.584963, 2.584963)), 
                          group = season)) +
  geom_tile() +
  theme_bw()+
  geom_text(aes(label = signif(rel_wis, 2)), size = 2.5) + 
  scale_fill_gradient2(low ="#6baed6", high =  "#d6936b", midpoint = 1, na.value = "grey50", 
                       name = "Relative WIS", 
                       breaks = c(-2,-1,0,1,2), 
                       labels =c("0.25", 0.5, 1, 2, 4)) + 
  labs(x = NULL, y = NULL)+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
        axis.title.x = element_text(size = 9),
        axis.text.y = element_text(size = 7),
        title = element_text(size = 9)
        ) +
  scale_y_discrete(limits = rev) +
    scale_x_discrete(labels = function(x) substring(x, 1, nchar(x)-10))+
  facet_grid(cols = vars(season), scales = "free_x", labeller = as_labeller(c(`2021-2022` = "A) 2021-2022",`2022-2023` = "B) 2022-2023")))+
  theme(axis.ticks.y = element_blank())
figures7


# ggsave(paste0(manuscript_repo, "/Supplemental_analyses/Supplemental Output/Figure_S7.png"), plot = figures7, width = 12, height= 8)


modelrankings21ln <- inc.rankings_location21ln %>%  ungroup()%>% group_by(model) %>% summarise(low = min(rel_wis), high = max(rel_wis), median = median(rel_wis), mean = mean(rel_wis)) %>% mutate(diff = high - low)

modelrankings23ln <- inc.rankings_location23ln %>%  ungroup()%>% group_by(model) %>% summarise(low = min(rel_wis), high = max(rel_wis), median = median(rel_wis), mean = mean(rel_wis)) %>% mutate(diff = high - low)

#arrange(filter(Scores_tab21ln,  model != "Flusight-ensemble", below_baseline_pct > 50), desc(below_baseline_pct))
scores_tab_nice21ln <- Scores_tab21ln %>% mutate(across(where(is.numeric),~round(.x, 2)))

#arrange(filter(Scores_tab23ln,  model != "Flusight-ensemble", below_baseline_pct > 50), desc(below_baseline_pct))
scores_tab_nice23ln <- arrange(filter(Scores_tab23ln,  model != "Flusight-ensemble", below_baseline_pct > 50), desc(below_baseline_pct)) %>% mutate(across(where(is.numeric),~round(.x, 2)))
```

