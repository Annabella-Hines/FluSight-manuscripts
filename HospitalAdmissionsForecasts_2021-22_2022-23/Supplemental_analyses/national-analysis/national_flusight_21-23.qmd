---
title: "FluSight National Analysis 2021-2023"
author: "CDC FluSight Team"
format: 
  html:
    self-contained: true
    code-background: true
  docx: default
editor: source
date: today 
echo: false
warning: false
message: false
always_allow_html: true
---

```{r setup}

#FluSight 2021-2022 -- 2022-23 

library(tidyverse)
library(epiDisplay)
library(MMWRweek)
library(DT)
library(gridExtra)
library(covidHubUtils)
library(arrow)


userid="nqr2"

'%!in%' <- Negate('%in%') #previously %notin% possible #update

last.tuesday21 = as.Date("2022-06-21")
last.tuesday23 = as.Date("2023-04-11")

window.width = c(2, 4, 8)

eval.weeks = 8

#updated to reflect inclusion criteria for 21-22 of Feb 21, 2022 to June 20, 2022 and Oct 17, 2022 to May 15, 2023 for 22-23
weeks.to.eval21 = 
  seq(as.Date("2022-02-21"),
      as.Date("2022-06-20"),
      by=7) %>% 
  as.character()

weeks.to.eval23 = 
  seq(as.Date("2022-10-17"),
      as.Date("2023-04-10"),
      by=7) %>% 
  as.character()

githubpath = paste0("C:/Users/",userid,"/Desktop/GitHub")
manuscript_repo <- paste0(githubpath, "/FluSight-manuscripts/HospitalAdmissionsForecasts_2021-22_2022-23")
flusight_forecast_data <-paste0("C:/Users/",userid,"/Desktop/GitHub/Flusight-forecast-data")

suppressMessages(invisible(source(paste0(manuscript_repo,"/Model names and colors.R"))))
source(paste0(manuscript_repo,"/functions2022-2023.R"))

select = dplyr::select
filter = dplyr::filter

```

#### Get data

```{r, read data}

all_dat21 <- read_parquet(paste0(manuscript_repo, "/Data_for_Figures/all_dat21.parquet")) %>% 
  mutate(target_end_date = as.Date(target_end_date), forecast_date = as.Date(forecast_date))
all_dat23 <- read_parquet(paste0(manuscript_repo, "/Data_for_Figures/all_dat23.parquet"))  %>% 
  mutate(target_end_date = as.Date(target_end_date), forecast_date = as.Date(forecast_date))


##Observed Data
obs_data21 <- read.csv(paste0(manuscript_repo,"/Data_for_Figures/obs_data21.csv")) %>% mutate(target_end_date = as.Date(target_end_date))
obs_data23 <- read.csv(paste0(manuscript_repo,"/Data_for_Figures/obs_data23.csv")) %>% mutate(target_end_date = as.Date(target_end_date)) 


dat_for_scores21 <- dat_for_scores_function(all_dat21, obs_data21)
dat_for_scores23 <- dat_for_scores_function(all_dat23, obs_data23)

```

## Results

##### WIS Calculations

```{R, Wis Calculations}

WIS_all21 <- wis_all_function(dat_for_scores21) %>% filter(location_name == "National")
WIS_all23 <- wis_all_function(dat_for_scores23) %>% filter(location_name == "National")

WIS_Season21 <- filter(WIS_all21, as.Date(forecast_date) >= as.Date("2022-02-19"), as.Date(forecast_date) <= as.Date(last.tuesday21+4)) %>% {unique(.)}
WIS_Season23 <- filter(WIS_all23, as.Date(forecast_date) >= as.Date("2022-10-17"), as.Date(forecast_date) <= as.Date(last.tuesday23+4)) %>% {unique(.)}

```

##### Season inc rankings: Table S5

```{r, Season}

  
inc.rankings_all21 <- inc.rankings_all_func(WIS_Season21)
inc.rankings_all23 <- inc.rankings_all_func(WIS_Season23)
  
    
inc.rankings_all <- rbind(mutate(inc.rankings_all21, season = "2021-2022"), mutate(inc.rankings_all23, season = "2022-2023")) %>% arrange(season, rel.WIS.skill)

  inc.rankings_all %>% 
    rename(Model = model,
           `Absolute WIS` = mean.WIS,
           `Relative WIS`= rel.WIS.skill,
           `50% Coverage (%)` = Percent.Cov.50,
           `95% Coverage (%)` = Percent.Cov.95,
           `% of Forecasts Submitted`  = frac.forecasts.submitted,
           `% of Locations Forecasted` = frac.locations.submitted,
           `% of Locations Fully Forecasted` = frac.locations.fully.forecasted,
           `% of Submitted Locations with All Forecasts` = frac.submitted.locations.fully.forecasted,
           `Season` = season) %>% 
    select(Model, `Absolute WIS`, `Relative WIS`,
           MAE, `50% Coverage (%)`, 
           `95% Coverage (%)`, 
           `% of Forecasts Submitted`) %>%
    #datatable()
    #arrange(`Season`, `Relative WIS`) %>% 
    mutate_if(is.numeric, round, digits = 2) %>%  
    knitr::kable(align = c("lcccccccc"), caption = "Table S5",#col.names = c()
    ) %>% 
    kableExtra::pack_rows(index = table(inc.rankings_all$season)) %>% 
    kableExtra::footnote( general_title = "") %>% 
    kableExtra::kable_classic() 
  # %>% kableExtra::save_kable(file = paste0(manuscript_repo,"/Supplemental_analyses/Supplemental Output/Table_S5.pdf"))

```
