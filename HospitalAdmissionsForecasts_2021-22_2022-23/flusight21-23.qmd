---
title: "FluSight Manuscript 2021-2023"
author: "CDC FluSight Team"
format: 
  html:
    self-contained: true
    code-background: true
  docx: default
editor: source
date: today 
echo: false
warning: false
message: false
always_allow_html: true
---

```{r setup}
### This quarto evaluates influenza forecasts for the 2021-2022 and 2022-2023 seasons. It can generate all figures, texts and outputs in the main manuscript 

#FluSight 2021-2022 -- 2022-23 

library(tidyverse)
library(epiDisplay)
library(MMWRweek)
library(DT)
library(plotly)
library(gridExtra)
#devtools::install_github("reichlab/zoltr")
#https://github.com/reichlab/covidHubUtils
#remotes::install_github("reichlab/covidHubUtils")
library(covidHubUtils)
library(ggridges)
library(viridis)
library(cowplot)
#library(scales)
library(RSocrata)

#CDC UserID goes here
#userid="nqr2"

#update path to where cloned GitHub repository lives
githubpath = paste0("C:/Users/", userid, "/Desktop/GitHub")

'%!in%' <- Negate('%in%') #previously %notin% possible #update

#final tuesday used to pull forecast data for each season
last.tuesday21 = as.Date("2022-06-21")
last.tuesday23 = as.Date("2023-05-16")

#window width to specify weeks of data to pull for evaluation
window.width = c(2, 4, 8)

eval.weeks = 8

#inclusion criteria for 21-22 of Feb 21, 2022 to June 20, 2022 and Oct 17, 2022 to May 15, 2023 for 22-23 by Mondays
weeks.to.eval21 = 
  seq(as.Date("2022-02-21"),
      as.Date("2022-06-20"),
      by=7) %>% 
  as.character()

weeks.to.eval23 = 
  seq(as.Date("2022-10-17"),
      as.Date("2023-05-15"),
      by=7) %>% 
  as.character()


manuscript_repo <- paste0(githubpath, "/FluSight-manuscripts/HospitalAdmissionsForecasts_2021-22_2022-23")
flusight_forecast_data <-paste0(githubpath, "/Flusight-forecast-data")

suppressMessages(invisible(source(paste0(manuscript_repo,"/Model names and colors.R"))))
source(paste0(manuscript_repo,"/functions2022-2023.R"))

select = dplyr::select
filter = dplyr::filter

```

#### Get data

```{r, read data}

datapath <- paste0(flusight_forecast_data,"/data-forecasts")
filenames = list.files(path=datapath, pattern=".csv", 
                       full.names = TRUE, recursive = TRUE)

unique_model_names <- unique(str_split(filenames, "/", simplify = TRUE)[, 8:9])
unique_model_names = cbind(unique_model_names, substr(unique_model_names[,2],1,10) ) 

unique_model_names = data.frame(model = as.character(unique_model_names[,1]),
                                filename = as.character(unique_model_names[,2]), 
                                date.submitted = unique_model_names[,3],
                                next.tuesday = get_next_tuesday(as.Date(unique_model_names[,3]))) %>% 
  group_by(model, next.tuesday) %>% 
  summarise(filename = as.character(filename[which.max(as.Date(date.submitted))])) %>% 
  ungroup() %>% 
  mutate(model = as.character(model),
         next.tuesday = as.character(next.tuesday))

dat21 <- unique_model_names %>% 
  filter(next.tuesday %in% 
           as.character(
             last.tuesday21 - 7*(0:((eval.weeks-1)+max(window.width)+(4-1)-1))
           )
  ) %>%
  filter(next.tuesday == as.character(last.tuesday21))

dat23  <- unique_model_names %>% 
  filter(next.tuesday %in% 
           as.character(
             last.tuesday23 - 7*(0:((eval.weeks-1)+max(window.width)+(4-1)-1))
           )
  ) %>%
  filter(next.tuesday == as.character(last.tuesday23))


  filenames = 
    paste0(flusight_forecast_data,"/data-forecasts/",
           unique_model_names$model, "/",
           unique_model_names$filename)
  
  
  dat_list <- lapply(filenames,
                     FUN = function(x){
                       read_csv(x, col_types = cols(.default = "c")) %>%
                         filter(grepl("hosp", target),
                                target %in% 
                                  paste(1:4,"wk ahead inc flu hosp"))
                       }
                     )
  
  
  models = unique_model_names$model
  unique_models = unique(models)
  
  all_dat_new <- tibble()
  for (i in c(1:length(dat_list))) {
    all_dat_new <- bind_rows(all_dat_new,
                             dat_list[[i]] %>%
                               select(location, target, target_end_date, forecast_date,
                                      type, quantile, value) %>%
                               mutate(
                                 location = as.character(location),
                                 location = 
                                   as.character(ifelse(location %in% as.character(1:9),
                                                       paste0("0",location),location)),
                                 model = models[i],
                                 value = as.numeric(value),
                                 quantile = as.numeric(quantile)  ,
                                 quantile=ifelse(quantile=="NaN", NA, quantile)))
    }
  
  
  all_dat21 = all_dat_new %>% filter(forecast_date %in% weeks.to.eval21, location != 78) %>% {unique(.)}


  all_dat23 <- all_dat_new %>% filter(forecast_date %in% weeks.to.eval23, location != 78) %>% {unique(.)}
  
  
  
##Observed Data
obs_data21 <- read_csv(paste0(flusight_forecast_data,"/data-truth/truth-Incident Hospitalizations-Archived_9-12-2022.csv")) %>%
  mutate(wk_end_date = as.Date(date, "%m/%d/%y"),
         location_name = ifelse(location == 'US', 'National', location_name)) %>%
  select(-date) %>%
  filter(wk_end_date %in% as.Date(unique(all_dat21$target_end_date)), location != 78 )


obs_data21 <- obs_data21 %>%
  rename(value_inc = value,
         target_end_date = wk_end_date) %>%
  filter(target_end_date < Sys.Date())


location.names21 = obs_data21 %>% select(location, location_name) %>% unique()


all_dat21 = left_join(all_dat21,location.names21, by = c("location"))
  

obs_data23 <- read_csv(paste0(flusight_forecast_data,"/data-truth/truth-Incident Hospitalizations-2023-06-23.csv")) %>%
  mutate(wk_end_date = as.Date(date, "%m/%d/%y"),
         location_name = ifelse(location == 'US', 'National', location_name)) %>%
  select(-date) %>%
  filter(wk_end_date %in% as.Date(unique(all_dat23$target_end_date) ), location != 78)


obs_data23 <- obs_data23 %>%
  dplyr::rename(value_inc = value,
                target_end_date = wk_end_date) %>%
  filter(target_end_date < Sys.Date())


location.names23 = obs_data23 %>% select(location, location_name) %>% unique()


all_dat23 = left_join(all_dat23,location.names23, by = c("location"))


dat_for_scores21 <- dat_for_scores_function(all_dat21, obs_data21)
dat_for_scores23 <- dat_for_scores_function(all_dat23, obs_data23)

```

## Results

The second peak exhibited higher weekly numbers of hospital admissions, with reported national weekly influenza hospital admissions exceeding 1000 for `r nrow(filter(obs_data21, value_inc >1000, location_name == "National"))` out of `r nrow(filter(obs_data21, location_name == "National"))` of the forecast weeks, though reporting of influenza hospitalizations was not mandatory in the HHS system until February 2, 2022.  Weekly numbers of admissions for 2022-23, exceeded 1000 for `r nrow(filter(obs_data23, value_inc >1000, location_name == "National"))` out of `r nrow(filter(obs_data23, location_name == "National"))` of the forecast weeks.

##### WIS Calculations

```{R, Wis Calculations}
#| message: false
#| warnings: false

## Reformat data and create scores

WIS_all21 <- wis_all_function(dat_for_scores21)
WIS_all23 <- wis_all_function(dat_for_scores23)


# pull out data on forecasts 
  WIS_alllocations21 <- WIS_all21
  WIS_alllocations23 <- WIS_all23
  
  WIS_all21 = filter(WIS_all21, location_name != "National")
  WIS_all23 = filter(WIS_all23, location_name != "National")
  
  WIS_Season21 <- filter(WIS_all21, as.Date(forecast_date) >= as.Date("2022-02-19"), as.Date(forecast_date) <= as.Date(last.tuesday21+4)) %>% {unique(.)}
  WIS_Season23 <- filter(WIS_all23, as.Date(forecast_date) >= as.Date("2022-10-17"), as.Date(forecast_date) <= as.Date(last.tuesday23+4)) %>% {unique(.)}

```

##### Forecasts & Observed (Figure 1)

```{r, Forecasts and Observed}

figure1a <- forecastsandobservedplt(all_dat21, obs_data21, "a")


figure1b <- forecastsandobservedplt(all_dat23, obs_data23, "b")

figure1a
figure1b

ggsave(paste0(manuscript_repo,"/Output/figure1a.png"), plot = figure1a, width=10, height=8)
ggsave(paste0(manuscript_repo,"/Output/figure1b.png"), plot = figure1b, width=10, height=8)



```



##### Season inc rankings (Table 1)

```{r, Season}

  inc.rankings_all21 <- inc.rankings_all_func(WIS_Season21)
  inc.rankings_all23 <- inc.rankings_all_func(WIS_Season23)
  

    
inc.rankings_all <- rbind(mutate(inc.rankings_all21, season = "2021-2022"), mutate(inc.rankings_all23, season = "2022-2023")) %>% arrange(season, rel.WIS.skill)

#if log-transformed analysis has been run, lines of code below can be uncommented to include it in table 1 can only be run after the supplemental log transformed analysis 
#logtable1 <- read.csv(paste0(manuscript_repo,"/Supplemental_analyses/log-transformed/logtable1.csv")) 

  inc.rankings_all %>% #left_join(., logtable1, join_by("model" == "Model", "season" == "Season")) %>% 
    rename(Model = model,
           `Absolute WIS` = mean.WIS,
           `Relative WIS`= rel.WIS.skill,
           `50% Coverage (%)` = Percent.Cov.50,
           `95% Coverage (%)` = Percent.Cov.95,
           `% of Forecasts Submitted`  = frac.forecasts.submitted,
           `% of Locations Forecasted` = frac.locations.submitted,
           `% of Locations Fully Forecasted` = frac.locations.fully.forecasted,
           `% of Submitted Locations with All Forecasts` = frac.submitted.locations.fully.forecasted,
           `Season` = season#, 
          # `Log Transformed Absolute WIS` = Absolute.WIS, 
          # `Log Transformed Relative WIS` = Relative.WIS
          ) %>% 
    select(Model, `Absolute WIS`, `Relative WIS`,
           MAE, `50% Coverage (%)`, 
           `95% Coverage (%)`, 
           `% of Forecasts Submitted`#, 
          # `Log Transformed Absolute WIS`, 
          # `Log Transformed Relative WIS`
          ) %>%
    mutate_if(is.numeric, round, digits = 2) %>%  
    knitr::kable(align = c("lcccccccc"), caption = "Table 1",#col.names = c()
    ) %>% 
    kableExtra::pack_rows(index = table(inc.rankings_all$season)) %>% 
    kableExtra::footnote( general_title = "") #%>% 
    #kableExtra::kable_classic() %>% kableExtra::save_kable(file = paste0(manuscript_repo,"/Output/table1_all.pdf"))
  #need below installed to run save_kable  
  #webshot::install_phantomjs()
    
    
    
WIS_Season21 <- WIS_Season21 %>% filter(model %in% inc.rankings_all21$model)
inc.rankings_location21 <- make_WIS_ranking_location(WIS_Season21)
inc.rankings_location21$below <- ifelse(inc.rankings_location21$relative_WIS < 1, 1, 0)
  
WIS_Season23 <- WIS_Season23 %>% filter(model %in% inc.rankings_all23$model)
inc.rankings_location23 <- make_WIS_ranking_location(WIS_Season23)
inc.rankings_location23$below <- ifelse(inc.rankings_location23$relative_WIS < 1, 1, 0)
  
inc.rankings_location <- inc.rankings_location21 %>% mutate(season = "2021-2022") %>% rbind(mutate(inc.rankings_location23, season = "2022-2023"))
  
national21 <- WIS_alllocations21 %>% filter(location_name == "National", model != "Flusight-ensemble", model != "Flusight-baseline")
national21 <- national21 %>% group_by(forecast_date) %>% summarise(n = length(unique(model)))

national23 <- WIS_alllocations23 %>% filter(location_name == "National", model != "Flusight-ensemble", model != "Flusight-baseline")
national23 <- national23 %>% group_by(forecast_date) %>% summarise(n = length(unique(model)))


WIS_Season21$season <- "2021-2022"
WIS_Season23$season <- "2022-2023"

WIS_Season <- rbind(WIS_Season21, WIS_Season23)

```
## Models Included

forecasts were eligible for inclusion in the 2022-2023 season (`r format(nrow(WIS_Season23), big.mark = ",")`) than in the 2021-2022 season (`r format(nrow(WIS_Season21), big.mark = ",")`). Fewer types of model forecasts were submitted across the weeks in the 2022-23 season (median `r median(national23$n)` models, range: `r min(national23$n)` to `r max(national23$n)`) than the 2021-22 season (median `r median(national21$n)` models, range: `r min(national21$n)` to `r max(national21$n)`)


## Relative WIS

`r nrow(filter(inc.rankings_all21, rel.WIS.skill < 1))` models in 2021-2022 and `r nrow(filter(inc.rankings_all23, rel.WIS.skill <1))` models in 2022-2023 outperformed the naive FluSight baseline in relative WIS over the evaluation period (Table 1). 

##### Model rank plot (Figure 2)

```{r, Model Ranks}

inc_scores_overall <- WIS_Season %>%
 # filter(include_overall == "TRUE") %>%
  group_by(target_end_date, target, location_name, season) %>%
  mutate(n_models = n()) %>%
  ##filter(n_models >= 15) %>%
  arrange(WIS) %>%
  mutate(model_rank = row_number(), rank_percentile = model_rank/n_models) %>%
  arrange(-WIS) %>%
  mutate(rev_rank = (row_number()-1)/(n_models-1)) %>%
  ungroup() %>%
  mutate(model = reorder(model, rev_rank, FUN=function(x) quantile(x, probs=0.25, na.rm=TRUE)))

n_unique_predict<- inc_scores_overall %>% filter(season == "2022-2023") %>% 
  group_by(target_end_date, location_name, target, season) %>%
  summarize(n()) %>%
  nrow()


## average rank
# inc_scores_overall %>%
#   group_by(season,model) %>%
#   summarize(average_rank = mean(model_rank), total_n = n(),
#             n_top_rank = sum(model_rank==1), pct_top = n_top_rank/total_n*100) %>%
#   print(n=Inf)

## average rank
average_rank_percent <- inc_scores_overall %>%
  group_by(model, season) %>%
  summarize(average_rank = mean(rev_rank), total_n = n(),
            n_top50 = sum(rev_rank> 0.5) , pct_top50 = n_top50/total_n*100,
            n_top25 = sum(rev_rank> 0.75) , pct_top25 = n_top25/total_n*100,
            n_bottom50 = sum(rev_rank< 0.5) , pct_bottom50 = n_bottom50/total_n*100,
            n_bottom25 = sum(rev_rank< 0.25) , pct_bottom25 = n_bottom25/total_n*100) %>%
  #print(n=Inf) %>% 
  arrange(-pct_top50)

ave_rank_percent21 <- average_rank_percent %>% filter(season == "2021-2022") %>% ungroup()
ave_rank_percent23 <- average_rank_percent %>% filter(season == "2022-2023") %>% ungroup()

bimodal_rank21 <- ave_rank_percent21 %>% mutate(pct_top_bottom = pct_top25 + pct_bottom25) %>% filter(pct_top_bottom >=75)
bimodal_rank23 <- ave_rank_percent23 %>% mutate(pct_top_bottom = pct_top25 + pct_bottom25) %>% filter(pct_top_bottom >=75)



figure2 <- inc_scores_overall %>% 
  ggplot(aes(y = model, x=rev_rank, fill = factor(after_stat(quantile)))) +
  stat_density_ridges(
    geom = "density_ridges_gradient", calc_ecdf = TRUE,
    quantiles = 4, quantile_lines = TRUE, color = "gray30"
  ) +
  scale_fill_manual(values = c("#6baed6", "#c86bd6","#d6936b","#78d66b"), name = "Quartiles")+
  labs(x = "Standardized Rank", y = "Model", color = "Quartiles")+
  scale_x_continuous(limits=c(0,1)) + 
  theme_bw()+
  facet_grid(rows = vars(season), scales = "free_y", labeller = as_labeller(c(`2021-2022` = "2021-2022",`2022-2023` = "2022-2023")) )+
  theme(strip.text = element_text(size = 10))
 figure2

 ggsave(paste0(manuscript_repo,"/Output/figure2.png"), width=8, height=8, units="in", plot = figure2)

```

## Model Ranking 

More than three-fourths (`r round(average_rank_percent[average_rank_percent$model == "Flusight-ensemble" & average_rank_percent$season == "2021-2022", "pct_top50"],2)`% in 2021-2022 and `r round(ave_rank_percent23[ave_rank_percent23$model == "Flusight-ensemble" , "pct_top50"],2)`% in 2022-23) of the FluSight Ensemble forecasts, for both seasons, were ranked among the top 50% of corresponding forecasts (Figure 3). Three models ranked in the top 25% for 2021-22 and 2022-23 seasons respectively: CMU-Timeseries(`r ave_rank_percent21[ave_rank_percent21$model == "CMU-TimeSeries","pct_top25"] %>% {round(., 2)}`%, `r ave_rank_percent23[ave_rank_percent23$model == "CMU-TimeSeries","pct_top25"] %>% {round(., 2)}`%), PSI-DICE(`r ave_rank_percent21[ave_rank_percent21$model == "PSI-DICE","pct_top25"] %>% {round(., 2)}`%, `r ave_rank_percent23[ave_rank_percent23$model == "PSI-DICE","pct_top25"] %>% {round(., 2)}`%), and MOBS-GLEAM-FLUH(`r ave_rank_percent21[ave_rank_percent21$model == "MOBS-GLEAM_FLUH","pct_top25"] %>% {round(., 2)}`%, `r ave_rank_percent23[ave_rank_percent23$model == "MOBS-GLEAM_FLUH","pct_top25"] %>% {round(., 2)}`%). Several models, seven in 2021-22 and five in 2022-23,  had bimodal rank distributions, with a majority of their forecasts falling in either the bottom 25% or top 25% (Figure 3).


## Relative WIS and Spatial Variation
```{r, Coverage}
#creates scores_table df used in code chunk below

Scores_tab21 <- scores_tab_function(inc.rankings_location21,inc.rankings_all21, WIS_Season21)
Scores_tab23 <- scores_tab_function(inc.rankings_location23, inc.rankings_all23, WIS_Season23)

```

##### Relative WIS by Location (Figure 3)

```{r, Relative WIS by location}

inc.rankings_all_nice <- rbind(mutate(inc.rankings_all21, season = "2021-2022"), mutate(inc.rankings_all23, season = "2022-2023")) %>% group_by(season) %>% arrange(season, rel.WIS.skill) %>% mutate(modelorder = paste(model, season))

scores <- inc.rankings_location %>% filter(is.finite(relative_WIS)) %>% left_join(., y = inc.rankings_all_nice[,c("model","season", "modelorder")], by = c("model", "season"))
scores_order <- inc.rankings_all_nice
levels_order <- scores_order$modelorder

figure3 <- ggplot(scores, 
                      aes(x = factor(modelorder, levels = levels_order), y=location_name, 
                          fill= scales::oob_squish(relative_WIS, range = c(- 2.584963, 2.584963)), 
                          group = season)) +
  geom_tile() +
  theme_bw()+
  geom_text(aes(label = signif(relative_WIS, 2)), size = 2.5) + # I adapted the rounding 
  scale_fill_gradient2(low ="#6baed6", high =  "#d6936b", midpoint = 1, na.value = "grey50", 
                       name = "Relative WIS", 
                       breaks = c(-2,-1,0,1,2), 
                       labels =c("0.25", 0.5, 1, 2, 4)) + 
  labs(x = NULL, y = NULL)+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
        axis.title.x = element_text(size = 9),
        axis.text.y = element_text(size = 7),
        title = element_text(size = 9)
        ) +
  scale_y_discrete(limits = rev) +
    scale_x_discrete(labels = function(x) substring(x, 1, nchar(x)-10))+
  facet_grid(cols = vars(season), scales = "free_x", labeller = as_labeller(c(`2021-2022` = "2021-2022",`2022-2023` = "2022-2023")))+
  theme(axis.ticks.y = element_blank())
figure3

ggsave(paste0(manuscript_repo,"/Output/figure3.png"), plot = figure3, width = 12, height= 8)


modelrankings21 <- inc.rankings_location21 %>%  ungroup()%>% group_by(model) %>% summarise(low = min(relative_WIS), high = max(relative_WIS), median = median(relative_WIS), mean = mean(relative_WIS)) %>% mutate(diff = high - low)

modelrankings23 <- inc.rankings_location23 %>%  ungroup()%>% group_by(model) %>% summarise(low = min(relative_WIS), high = max(relative_WIS), median = median(relative_WIS), mean = mean(relative_WIS)) %>% mutate(diff = high - low)

scores_tab_nice21 <- Scores_tab21 %>% mutate(across(where(is.numeric),~round(.x, 2)))

scores_tab_nice23 <- arrange(filter(Scores_tab23,  model != "Flusight-ensemble", below_baseline_pct > 50), desc(below_baseline_pct)) %>% mutate(across(where(is.numeric),~round(.x, 2)))


###extra code for pulling out models that outperformed baseline 
# `r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 1) %>% select(model)` (`r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 1) %>% select(below_baseline_pct) %>% {round(.,2)}`%), `r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 2) %>% select(model)` (`r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 2) %>% select(below_baseline_pct) %>% {round(.,2)}`%), `r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 3) %>% select(model)` (`r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 3) %>% select(below_baseline_pct) %>% {round(.,2)}`%), `r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 4) %>% select(model)` (`r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 4) %>% select(below_baseline_pct) %>% {round(.,2)}`%), `r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 5) %>% select(model)` (`r slice(arrange(filter(scores_tab_nice21,  model != "Flusight-ensemble"), desc(below_baseline_pct)), 5) %>% select(below_baseline_pct) %>% {round(.,2)}`%).

```

Model performance varied by spatial jurisdiction, with state-specific relative WIS values with similar ranges each year with `r round(min(inc.rankings_location21$relative_WIS), 2)` to `r round(max(inc.rankings_location21$relative_WIS), 2)` in 2021-22 and `r round(min(inc.rankings_location23$relative_WIS), 2)` to `r round(max(inc.rankings_location23$relative_WIS), 2)` in 2022-23. The relative WIS of the FluSight Ensemble had the smallest range of values across all locations from `r filter(inc.rankings_location21, model == "Flusight-ensemble") %>% {round(min(.$relative_WIS),2)}` to `r filter(inc.rankings_location21, model == "Flusight-ensemble") %>% {round(max(.$relative_WIS),2)}` in 2021-22 to `r filter(inc.rankings_location23, model == "Flusight-ensemble") %>% {round(min(.$relative_WIS),2)}` to `r filter(inc.rankings_location23, model == "Flusight-ensemble") %>% {round(max(.$relative_WIS),2)}` in 2022-23 (Figure 4 and Supplemental Figure X boxplot). To further examine forecast performance across jurisdictions, we considered the percent of jurisdictions that the relative WIS value for a given model and location pair was less than the baseline (i.e., lower than 1). The FluSight Ensemble performed better than the baseline for `r nrow(filter(inc.rankings_location21, model == "Flusight-ensemble" & relative_WIS <1))` out of `r nrow(inc.rankings_location21 %>% filter(model == "Flusight-ensemble"))` forecast jurisdictions. More models performed better than the baseline in 2022-23 than 2021-22. In 2021-22, `r nrow(filter(Scores_tab21, model != "Flusight-ensemble", below_baseline_pct >= 50))` models performed better than the baseline at least 50% of the time, compared to `r nrow(filter(Scores_tab23, model != "Flusight-ensemble", below_baseline_pct >= 50))` .

##### Absolute WIS by model (Figure 4 a)

```{r, Abs WIS}


abs_states <- WIS_Season %>% filter(location_name != "National") %>% 
  filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(abs_WIS = mean(WIS)) %>% 
  ungroup() %>% mutate(log_WIS = log10(abs_WIS)) 

abs_flusight <- abs_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
abs_not_flusight <- abs_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))

wis_labels <- as_labeller(c(`1 wk ahead inc flu hosp` = "1 Week Ahead", 
                                 `4 wk ahead inc flu hosp` = "4 Week Ahead", 
                            `2021-2022` = "2021-2022", 
                            `2022-2023` = "2022-2023"
                            ))

#Absolute WIs version - not log scores
# figure4_absWIS <- ggplot(abs_flusight, aes(x = target_end_date,
#                                      y = abs_WIS, group = model,
#                                      col = model)) +
#   geom_line(size = 1) + geom_point(size = 2) +
#   scale_color_manual(values = c("#d6936b", "#6baed6")) +
#   geom_line(data = abs_not_flusight, aes(x = target_end_date, y = abs_WIS, group = model), color = adjustcolor("grey50", .35)) +
#   labs(y = "Absolute WIS",
#        x = "Forecast Target End Date",
#        color = "Model",
#        title = "Absolute WIS by Model") +
#   theme_bw()+
#   scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b") +
#   theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
#   facet_grid(rows = vars(target), cols = vars(season), labeller = wis_labels,  scales = "free_x")
# 
# figure4_absWIS

# ggsave(paste0(manuscript_repo,"/Output/figure4_absWIS.png"), width=8, height=5, plot = figure4_absWIS)

figure4a <-  ggplot(abs_flusight, aes(x = target_end_date,
                                     y = log_WIS, group = model,
                                     col = model)) +
  geom_line(linewidth = 1) + geom_point(size = 2) +
  scale_color_manual(values = c("#d6936b", "#6baed6")) +
  geom_line(data = abs_not_flusight, aes(x = target_end_date, y = log_WIS, group = model), color = adjustcolor("grey50", .35)) +
  labs(y = "Absolute WIS",
       x = "Forecast Target End Date",
       color = "Model",
       title = "Absolute WIS by Model"
       ) +
  theme_bw()+
  scale_x_date(breaks = seq.Date(from = min(abs_flusight$target_end_date), to= max(abs_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b") +
  scale_y_continuous(breaks = c(0,1,2,3), labels = c("0", "1", "10", "100"))+
  theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
  facet_grid(rows = vars(target), cols = vars(season), labeller = wis_labels,  scales = "free_x")

figure4a

ggsave(paste0(manuscript_repo,"/Output/figure4a.png"), plot = figure4a, width = 8, height = 5)
```

##### Coverage Tables

```{r, Coverage tables}

locationcount <- length(unique(WIS_Season$location_name))# - 1

coverage95_summary <- WIS_Season %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
   filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% ungroup() %>% unique()

coverage95_summary_4 <- WIS_Season %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "4 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% ungroup() %>%  unique()
coverage50_summary_4 <- WIS_Season %>%  filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "4 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage50 = sum(coverage.50)/locationcount) %>% unique()


coverage50_summary <- WIS_Season %>% filter(model == "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage50 = sum(coverage.50)/locationcount) %>% ungroup() %>% unique()

## 4 week ahead 50 and 95% coverage summaries
# coverage95_summary_4 %>% filter(season == "2021-2022") %>% {summary(.$coverage95)}
# coverage95_summary_4 %>% filter(season == "2022-2023") %>% {summary(.$coverage95)}
# coverage50_summary_4 %>% filter(season == "2021-2022") %>% {summary(.$coverage50)}
# coverage50_summary_4 %>% filter(season == "2022-2023") %>% {summary(.$coverage50)}


## one week ahead 50 and 95% coverage summaries
# coverage95_summary %>% filter(season == "2021-2022") %>% {summary(.$coverage95)}
# coverage95_summary %>% filter(season == "2022-2023") %>% {summary(.$coverage95)}
# coverage50_summary %>% filter(season == "2021-2022") %>% {summary(.$coverage50)}
# coverage50_summary %>% filter(season == "2022-2023") %>% {summary(.$coverage50)}

coverage95_summary_all <- WIS_Season %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(model, forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% unique() %>% 
  group_by(model) %>% summarise(model = model,
                                avg = mean(coverage95)) %>% unique()


coverage50_summary_all <- WIS_Season %>% filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "1 wk ahead inc flu hosp") %>% 
  group_by(model, forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage50 = sum(coverage.50)/locationcount)


coverage95_summary_all2 <- WIS_Season %>%  filter(model != "Flusight-ensemble") %>% filter(location_name != "National") %>%
  filter(target == "2 wk ahead inc flu hosp") %>% 
  group_by(model, forecast_date, season) %>% 
  summarise(model = model,
            forecast_date = as.Date(forecast_date, format = "%Y-%m-%d"),
            coverage95 = sum(coverage.95)/locationcount) %>% unique() %>% 
  group_by(model) %>% summarise(model = model,
                                  avg = mean(coverage95)) %>% unique()

weekly_breakdown <- WIS_Season %>% group_by(model, season) %>% summarise(
  model = model,
  One_week_Cov = mean(coverage.95[target == "1 wk ahead inc flu hosp"])*100,
  Two_week_Cov = mean(coverage.95[target == "2 wk ahead inc flu hosp"])*100,
  Three_week_Cov = mean(coverage.95[target == "3 wk ahead inc flu hosp"])*100,
  Four_week_Cov = mean(coverage.95[target == "4 wk ahead inc flu hosp"])*100
) %>% unique()



cov95_breakdown21 <- cov95_function(WIS_Season21, Scores_tab21)

cov95_breakdown23 <- cov95_function(WIS_Season23, Scores_tab23)

cov95_breakdownall <- rbind(mutate(cov95_breakdown21, season = "2021-2022"), mutate(cov95_breakdown23, season = "2022-2023"))

cov95_breakdownall %>% arrange(season, Relative_WIS) %>% mutate_if(is.numeric, round, digits = 2) %>% select(-season) %>%  
  knitr::kable(align = c("lcccccccccc"), caption = "Table 2", col.names = c("Model", "Relative WIS", "% WIS Below Baseline", "1 Wk Coverage", "2 Wk Coverage", "3 Wk Coverage", "4 Wk Coverage", "% Cov abv 90 (1 Wk)", "% Cov abv 90 (2 Wk)", "% Cov abv 90 (3 Wk)", "% Cov abv 90 (4 Wk)")) %>% 
  kableExtra::footnote(general = "Table 2: % WIS Below Baseline shows the percent of WIS values for each model below the corresponding FluSight-Baseline WIS. The '% Cov abv 90' columns show the percent of weekly 95% coverage values that are greater than or equal to 90% for each model by horizon.", general_title = "") %>% 
  kableExtra::pack_rows(index = table(cov95_breakdownall$season)) %>% 
  kableExtra::kable_classic()  %>% 
   kableExtra::save_kable(file = paste0(manuscript_repo, "/Output/table2.pdf"))

# length(unique(coverage95_states$target_end_date[coverage95_states$target == "1 wk ahead inc flu hosp"]))
# length(unique(coverage95_states$target_end_date))
# length(unique(WIS_Season$forecast_date))
# unique(WIS_Season$target_end_date[WIS_Season$target == "1 wk ahead inc flu hosp"])
# unique(WIS_Season$target_end_date[WIS_Season$target == "4 wk ahead inc flu hosp"])

```

##### Absolute WIS by week table

```{r, Abs WIS by wk}
# |fig-height: 10
# |fig-width: 8

model_abs <- abs_states %>% unique() %>% group_by(model, target, season) %>% summarise(
  model = model,
  target = target,
  minimum = min(abs_WIS),
  maximum = max(abs_WIS),
  Median = median(abs_WIS)
) %>% ungroup() %>% unique()

abs_states_all <- WIS_Season %>% filter(location_name != "National") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(model = model,
            target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
            abs_WIS = mean(WIS)) %>% 
  mutate(model_color = ifelse(model == "Flusight-baseline", "red", ifelse(model == "Flusight-ensemble", "green", "gray")))


model_abs_all <- abs_states_all %>% unique() %>% group_by(model, target, season) %>% summarise(
  model = model,
  target = target,
  minimum = min(abs_WIS),
  maximum = max(abs_WIS),
  Median = median(abs_WIS)
) %>% unique()

abs_breakdown <- WIS_Season %>% group_by(model, season) %>% summarise(
  model = model,
  One_week_abs = mean(WIS[target == "1 wk ahead inc flu hosp"]),
  Two_week_abs = mean(WIS[target == "2 wk ahead inc flu hosp"]),
  Three_week_abs = mean(WIS[target == "3 wk ahead inc flu hosp"]),
  Four_week_abs = mean(WIS[target == "4 wk ahead inc flu hosp"])
) %>% unique() 


abs_breakdown_WIS <- merge(inc.rankings_all[,c(1,3,11)], abs_breakdown, by= c("model", "season")) %>% arrange(season, rel.WIS.skill)

# abs_breakdown %>% filter(season == "2021-2022") %>% {median(.$One_week_abs)}
# abs_breakdown %>% filter(season == "2022-2023") %>% {median(.$One_week_abs)}
# summary(abs_breakdown$Two_week_abs)
# summary(abs_breakdown$Three_week_abs)
# abs_breakdown %>% filter(season == "2021-2022") %>% {median(.$Four_week_abs)}
# abs_breakdown %>% filter(season == "2022-2023") %>% {median(.$Four_week_abs)}
# # 


  
  
abs_breakdown_WIS %>% select(-season) %>% mutate_if(is.numeric, round, digits = 2) %>%  
  knitr::kable(align = c("lccccc"), caption = "Table 3", col.names = c("Model", "Relative WIS", "1 Wk ABS WIS", "2 Wk ABS WIS", "3 Wk ABS WIS", "4 Wk ABS WIS")) %>% 
  kableExtra::footnote(general = "Table 3", general_title = "")%>% 
  kableExtra::pack_rows(index = table(abs_breakdown_WIS$season)) %>% 
  kableExtra::kable_classic() %>% 
   kableExtra::save_kable(file = paste0(manuscript_repo, "/Output/table3.pdf"))

fs_wis_min_date21 <- abs_states %>% filter(season == "2021-2022", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% arrange(abs_WIS) %>% {head(., n = 1)} %>% pull(target_end_date)
fs_wis_max_date21 <- abs_states %>% filter(season == "2021-2022",model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% arrange(desc(abs_WIS)) %>% {head(., n = 1)} %>% pull(target_end_date)

fs_wis_min4_date21 <- abs_states %>% filter(season == "2021-2022", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% arrange(abs_WIS) %>% {head(., n = 1)} %>% pull(target_end_date)
fs_wis_max4_date21 <- abs_states %>% filter(season == "2021-2022",model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% arrange(desc(abs_WIS)) %>% {head(., n = 1)} %>% pull(target_end_date)

fs_wis_min_date23 <- abs_states %>% filter(season == "2022-2023", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% arrange(abs_WIS) %>% {head(., n = 1)} %>% pull(target_end_date)
fs_wis_max_date23 <- abs_states %>% filter(season == "2022-2023",model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% arrange(desc(abs_WIS)) %>% {head(., n = 1)} %>% pull(target_end_date)

fs_wis_min4_date23 <- abs_states %>% filter(season == "2022-2023", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% arrange(abs_WIS) %>% {head(., n = 1)} %>% pull(target_end_date)
fs_wis_max4_date23 <- abs_states %>% filter(season == "2022-2023",model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% arrange(desc(abs_WIS)) %>% {head(., n = 1)} %>% pull(target_end_date)

```
## Absolute WIS
Across forecasted weeks, the FluSight Ensemble had a similar median absolute WIS at the 1-week horizon of `r filter(model_abs, season == "2021-2022", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% pull(Median) %>% {round(.,2)}` (range: `r filter(model_abs, season == "2021-2022", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% pull(minimum) %>% {round(.,2)}` to `r filter(model_abs, season == "2021-2022", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% pull(maximum) %>% {round(.,2)}`) for 2021-22, and  `r filter(model_abs, season == "2022-2023", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% pull(Median) %>% {round(.,2)}` (range: `r filter(model_abs, season == "2022-2023", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% pull(minimum) %>% {round(.,2)}` to `r filter(model_abs, season == "2022-2023", model == "Flusight-ensemble", target == "1 wk ahead inc flu hosp") %>% pull(maximum) %>% {round(.,2)}`) for 2022-23. Minimum values occurred on `r format(fs_wis_min_date21, "%B %d")` and `r format(fs_wis_min_date23, "%B %d, %Y")` for the respective seasons. Maximum values occurred on `r format(fs_wis_max_date21, "%B %d")` and `r format(fs_wis_max_date23, "%B %d, %Y")`, for the respective seasons (Figure 2). The 2021-22 FluSight Ensemble had a  higher median absolute WIS at the 4-week horizon of `r filter(model_abs, season == "2021-2022", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% pull(Median) %>% {round(.,2)}` (range: `r filter(model_abs, season == "2021-2022", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% pull(minimum) %>% {round(.,2)}` to `r filter(model_abs, season == "2021-2022", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% pull(maximum) %>% {round(.,2)}`), compared to the 2022-23 FluSight Ensemble that had a lower median absolute WIS at the 4-week horizon, but broader range, `r filter(model_abs, season == "2022-2023", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% pull(Median) %>% {round(.,2)}` (range: `r filter(model_abs, season == "2022-2023", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% pull(minimum) %>% {round(.,2)}` to `r filter(model_abs, season == "2022-2023", model == "Flusight-ensemble", target == "4 wk ahead inc flu hosp") %>% pull(maximum) %>% {round(.,2)}`). Minimum values for each season occurred on `r format(fs_wis_min4_date21, "%B %d")` and `r format(fs_wis_min4_date23, "%B %d, %Y")`, respectively. Maximum values for each season occurred on `r format(fs_wis_max4_date21, "%B %d")` and `r format(fs_wis_max4_date23, "%B %d, %Y")`, respectively (Figure 2). Across models, the median absolute WIS values, for 2021-22, at the 1- and 4-week ahead horizons were `r round(median(filter(abs_breakdown, season == "2021-2022")$One_week_abs),2)` and `r round(median(filter(abs_breakdown, season == "2021-2022")$Four_week_abs),2)` respectively which were lower than the median absolute WIS values for 2022-23, `r round(median(filter(abs_breakdown, season == "2022-2023")$One_week_abs),2)` and `r round(median(filter(abs_breakdown, season == "2022-2023")$Four_week_abs),2)` (Table XX).

##### Coverage Figures

##### 95% Coverage by model (Figure 4b)

```{r, 95 coverage}

coverage95_states <- WIS_Season %>% filter(location_name != "National") %>% 
  filter(target == "1 wk ahead inc flu hosp"| target == "4 wk ahead inc flu hosp") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(coverage95 = mean(coverage.95)) %>% 
  mutate(model_color = ifelse(model == "Flusight-baseline", "#d6936b", ifelse(model == "Flusight-ensemble", "#6baed6", "#abbfcb"))) %>% ungroup()

coverage95_flusight <- coverage95_states %>% filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage95_not_flusight <- coverage95_states %>% filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))

coverage_labels <- as_labeller(c(`1 wk ahead inc flu hosp` = "1 Week Ahead", 
                                 `4 wk ahead inc flu hosp` = "4 Week Ahead", 
                                 `2021-2022` = "2021-2022", 
                                 `2022-2023` = "2022-2023"))



figure4b <- ggplot(coverage95_flusight, aes(x = target_end_date, 
                                     y = coverage95, group = model,
                                     col = model)) +
  geom_line(linewidth = 1) + geom_point(size = 2) +
  geom_line(data = coverage95_not_flusight, aes(x = target_end_date, y = coverage95, group = model), color = adjustcolor("grey50", .35)) + 
  labs(y = "95% Coverage",
       x = "",
       color = "Model",
       title = "95% Coverage by Model") +
  scale_color_manual(values = c("#d6936b", "#6baed6")) +
  theme_bw()+
  scale_x_date(breaks = seq.Date(from = min(coverage95_flusight$target_end_date), to= max(coverage95_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
  facet_grid(rows = vars(target), cols = vars(season), labeller = coverage_labels, scales = "free_x")

figure4b

 ggsave(paste0(manuscript_repo,"/Output/figure4b.png"), width=8, height=6, plot = figure4b)


```

##### 50% coverage by model

```{r, 50 coverage}

coverage50_states <- WIS_Season %>% filter(location_name != "National") %>% 
  filter(target == "1 wk ahead inc flu hosp" | target == "4 wk ahead inc flu hosp") %>% 
  group_by(model, target_end_date, target, season) %>% 
  summarise(coverage50 = mean(coverage.50),
            coverage95 = mean(coverage.95)) %>% 
  ungroup()

coverage50_flusight <- coverage50_states %>% 
  filter(model %in% c("Flusight-baseline", "Flusight-ensemble"))
coverage50_not_flusight <- coverage50_states %>% 
  filter(model %!in% c("Flusight-baseline", "Flusight-ensemble"))

# figure4_50cov <- ggplot(coverage50_flusight, aes(x = target_end_date, 
#                                      y = coverage50, group = model,
#                                      col = model)) +
#   geom_line(size = 1) + geom_point(size = 2) +
#   geom_line(data = coverage50_not_flusight, aes(x = target_end_date, y = coverage50, group = model), color = adjustcolor("grey50", .35)) + 
#   labs(y = "Coverage",
#        x = "",
#        color = "Model",
#        title = "50% Coverage by Model"
#        ) +
#   scale_color_manual(values = c("#d6936b", "#6baed6")) +
#   theme_bw()+
#   scale_x_date(breaks = seq.Date(from = min(coverage50_flusight$target_end_date), to= max(coverage50_flusight$target_end_date), by = "2 weeks"), date_labels = "%d %b") +
#   theme(axis.text.x = element_text(angle = 60, hjust = 1), panel.grid = element_blank())+
#   facet_grid(rows = vars(target), cols = vars(season), labeller = coverage_labels, scales = "free_x")
# 
# figure4_50cov

 # ggsave(paste0(manuscript_repo,"/Output/figure4_50cov.png"), width=8, height=6, plot = figure4_50cov)

```


## Coverage

The minimum 1-week horizon 95% and 50% coverage values both occurred on  `r coverage95_summary %>% filter(season == "2021-2022") %>% arrange(coverage95) %>% {head(.,1)} %>% pull(forecast_date) %>% {format(., "%B %d, %Y")}` and `r coverage50_summary %>% filter(season == "2021-2022") %>% arrange(coverage50) %>% {head(.,1)} %>% pull(forecast_date) %>% {format(., "%B %d, %Y")}` for 2021-22 and `r coverage95_summary %>% filter(season == "2022-2023") %>% arrange(coverage95) %>% {head(.,1)} %>% pull(forecast_date) %>% {format(., "%B %d, %Y")}` and `r coverage50_summary %>% filter(season == "2022-2023") %>% arrange(coverage50) %>% {head(.,1)} %>% pull(forecast_date) %>% {format(., "%B %d, %Y")}` for 2022-23, respectively  (Figure 2). Across forecasted weeks, the FluSight Ensemble had a high median 95% coverage at the 1-week horizon, although it was slightly higher for the 2022-23 season (`r round(median(filter(coverage95_summary, season == "2022-2023")$coverage95)*100, 2)`%, range: `r round(min(filter(coverage95_summary, season == "2022-2023")$coverage95)*100, 2)`% to `r round(max(filter(coverage95_summary, season == "2022-2023")$coverage95)*100, 2)`%) than the 2021-22 season (`r round(median(filter(coverage95_summary, season == "2021-2022")$coverage95)*100, 2)`%, range: `r round(min(filter(coverage95_summary, season == "2021-2022")$coverage95)*100, 2)`% to `r round(max(filter(coverage95_summary, season == "2021-2022")$coverage95)*100, 2)`%). The median 50% coverage for the FluSight Ensemble was also higher for 2022-23 (`r round(median(filter(coverage50_summary, season == "2022-2023")$coverage50)*100, 2)`%, range: `r round(min(filter(coverage50_summary, season == "2022-2023")$coverage50)*100, 2)`% to `r round(max(filter(coverage50_summary, season == "2022-2023")$coverage50)*100, 2)`%) than for 2021-22 (`r round(median(filter(coverage50_summary, season == "2021-2022")$coverage50)*100, 2)`%, range: `r round(min(filter(coverage50_summary, season == "2021-2022")$coverage50)*100, 2)`% to `r round(max(filter(coverage50_summary, season == "2021-2022")$coverage50)*100, 2)`%). Similarly, at the 4-week horizon the FluSight Ensemble had a higher median 95% and 50% coverage for 2022-23 (`r round(median(filter(coverage95_summary_4, season == "2022-2023")$coverage95)*100, 2)`, range: `r round(min(filter(coverage95_summary_4, season == "2022-2023")$coverage95)*100, 2)`% to `r round(max(filter(coverage95_summary_4, season == "2022-2023")$coverage95)*100, 2)`% and `r round(median(filter(coverage50_summary_4, season == "2022-2023")$coverage50)*100, 2)`%, range: `r round(min(filter(coverage50_summary_4, season == "2022-2023")$coverage50)*100, 2)`% to `r round(max(filter(coverage50_summary_4, season == "2022-2023")$coverage50)*100, 2)`%, respectively) than 2021-22 ( `r round(median(filter(coverage95_summary_4, season == "2021-2022")$coverage95)*100, 2)`%, range: `r round(min(filter(coverage95_summary_4, season == "2021-2022")$coverage95)*100, 2)`% to `r round(max(filter(coverage95_summary_4, season == "2021-2022")$coverage95)*100, 2)`% and `r round(median(filter(coverage50_summary_4, season == "2021-2022")$coverage50)*100, 2)`% (range: `r round(min(filter(coverage50_summary_4, season == "2021-2022")$coverage50)*100, 2)`% to `r round(max(filter(coverage50_summary_4, season == "2021-2022")$coverage50)*100, 2)`%, respectively).


Over the forecast weeks, the 2021-22 FluSight ensemble had slightly higher overall 95% coverage values of `r round(cov95_breakdown21[cov95_breakdown21$model == "Flusight-ensemble", "One_week_Cov"], 2)`%, `r round(cov95_breakdown21[cov95_breakdown21$model == "Flusight-ensemble", "Two_week_Cov"], 2)`%, `r round(cov95_breakdown21[cov95_breakdown21$model == "Flusight-ensemble", "Three_week_Cov"], 2)`%, and `r round(cov95_breakdown21[cov95_breakdown21$model == "Flusight-ensemble", "Four_week_Cov"], 2)`% for the 1- to 4-week ahead horizons respectively, compared to the 2022-23 season during which the FluSight ensemble had 95% coverage values of `r round(cov95_breakdown23[cov95_breakdown23$model == "Flusight-ensemble", "One_week_Cov"], 2)`%, `r round(cov95_breakdown23[cov95_breakdown23$model == "Flusight-ensemble", "Two_week_Cov"], 2)`%, `r round(cov95_breakdown23[cov95_breakdown23$model == "Flusight-ensemble", "Three_week_Cov"], 2)`%, and `r round(cov95_breakdown23[cov95_breakdown23$model == "Flusight-ensemble", "Four_week_Cov"], 2)`% for the 1- to 4-week ahead horizons respectively. A higher proportion of models had higher overall 95% coverage values at the 1-week ahead horizion than at the 4-week ahead horizon for 2022-23 (`r length(which(cov95_breakdown23$One_week_Cov > cov95_breakdown23$Four_week_Cov))` of `r nrow(cov95_breakdown23)`models) than 2021-22 (`r length(which(cov95_breakdown21$One_week_Cov > cov95_breakdown21$Four_week_Cov))` out of `r nrow(cov95_breakdown21)` models) (Supplemental Table 2). Out of the forecast targets and across forecast weeks, the FluSight ensemble's 95% prediction interval contained at least 90% of the corresponding observed values only `r round(cov95_breakdown21[cov95_breakdown21$model == "Flusight-ensemble", "One_week_Percent_above_90"], 2)`% and `r round(cov95_breakdown23[cov95_breakdown23$model == "Flusight-ensemble", "One_week_Percent_above_90"], 2)`% of the time, for 2021-22 and 2022-23 respectively. This was more often than most component models (Supplemental Table X). 



##### Relative WIS Distribution

```{r, Relative WIS distribution}

model_order <- merge(inc.rankings_all_nice[,1:3], inc.rankings_location, by = "model", all.y = TRUE) %>% arrange(rel.WIS.skill)

figs1 <- model_order %>% 
  ggplot( aes(x = fct_inorder(model), y = relative_WIS))+
  geom_boxplot()+
  theme_bw() +
  geom_hline(aes(yintercept = 1), color = "#6baed6")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
        plot.margin = margin(0,1,0,25))+
  labs(x = "Model", y = "Relative WIS")+
  facet_grid(cols = vars(season), scales = "free_x", labeller = as_labeller(c(`2021-2022` = "A) 2021-2022", `2022-2023` = "B) 2022-2023")))

figs1


 ggsave(paste0(manuscript_repo,"/Output/figures1.jpg"), plot = figs1, width=10, height=8)
```


#### Plots

```{r print plots}

 figure1a
 figure1b
 figure2 
 figure3 
 figure4a
 figure4b
# figure4_absWIS 
# figure4_50cov 
 figs1

```

```{r not included in manuscript}

##### WIS avg by week
# 
# plot.scores <- WIS_Season %>% filter(target == "4 wk ahead inc flu hosp") %>% 
#                 group_by(model, target_end_date, season) %>% 
#                 summarise(model = model,
#                           target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
#                           Avg_WIS = mean(WIS)) %>%
#                 unique()
# 
# AVG <- plot.scores %>% group_by(target_end_date, season) %>% 
#                   summarise(target_end_date = as.Date(target_end_date, format = "%Y-%m-%d"),
#                   Avg_WIS = mean(Avg_WIS)) %>% 
#                   mutate(model = rep("Average Score of All Models"), .before = target_end_date) %>% 
#                   unique()     
# 
# plot.scores <- as.data.frame(rbind(plot.scores, AVG)) %>% 
#                 filter(model %in% c("Average Score of All Models", "Flusight-baseline", "Flusight-ensemble"))
# 
# x <- ggplot(plot.scores, aes(x = target_end_date, 
#                              y = Avg_WIS, group = model,
#                              col = model)) +
#       geom_line() + geom_point() +
#   labs(y = "Average WIS",
#        x = "",
#        color = "Model",
#        title = "Average 4-Week Ahead Weighted Interval Scores by Model") +
#   scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
#   scale_color_manual(values = c( "#d66bae", "#6baed6", "#aed66b"))+
#   theme_minimal()+
#   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#   facet_grid(cols = vars(season), scales = "free_x")
# x

# ggsave(plot = x, paste0(manuscript_repo,"/Output/Ave_4wk_WIS_model.png"), height = 6, width = 8)
```